name: Pull request flow

on:
  pull_request:
    branches: [next, latest]

jobs:
  cancel-previous-run:
    name: Cancel pull request workflow
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}
  compile-apex-classes:
    needs: [cancel-previous-run, setup-pull-request]
    name: Deploy apex files
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v2
      - uses: sfdx-actions/setup-sfdx@v1
      - name: Deploy apex files
        run: |
          echo -n "${{needs.setup-pull-request.outputs.scratch}}" | base64 -d | base64 -d > token.txt
          sfdx force:auth:sfdxurl:store -f token.txt -d -a test-org       
          sfdx force:source:deploy -u test-org -w 10 -p force-app --json > result.json 2> /dev/null || true          
          deployStatus=$(jq '.status' result.json)
          if [[ "$deployStatus" != "0" ]]; then              
              echo "$(jq '.result.deploys[0].details.componentFailures' result.json)"
              echo "$(jq '.result.details.componentFailures' result.json)"
              exit 1              
          fi

          # deploy unmanaged metadata (like approval process)
          sfdx force:source:deploy -u test-org -w 10 -p unpackaged --json > result.json 2> /dev/null || true 
          echo "Code deployed successfully!"
  apex-tests:
    needs: [compile-apex-classes, setup-pull-request]
    name: Run apex tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: sfdx-actions/setup-sfdx@v1
      - name: Run apex tests
        run: |
          echo -n "${{needs.setup-pull-request.outputs.scratch}}" | base64 -d | base64 -d > token.txt
          sfdx force:auth:sfdxurl:store -f token.txt -d -a test-org
          ls -1 force-app/main/default/permissionsets | sed -e 's/.permissionset-meta.xml//' | xargs -L 1 sfdx force:user:permset:assign -u test-org --permsetname > output 2> /dev/null || true
          sfdx force:apex:test:run -c -y -u test-org -r human -l RunLocalTests --json > result.json 2> /dev/null || true
          deployStatus=$(jq '.status' result.json)
          if [[ "$deployStatus" != "0" ]]; then
              echo "$(jq '.result.tests[] | select(.Outcome=="Fail")' result.json)"
              exit 1
          fi
          echo "Apex tests pass!"
  unit-tests:
    needs: [cancel-previous-run]
    name: Run javascript tests
    runs-on: ubuntu-latest
    container:
      image: provus1/provus-ci:2.0

    timeout-minutes: 6
    steps:
      - uses: actions/checkout@v2
      - name: Run tests
        run: |
          cp -R . /source
          cd /source

          mkdir node_modules
          cp -R /node_modules/* /source/node_modules
          npm run tests

  functional-tests:
    needs:
      [
        apex-tests,
        compile-apex-classes,
        unit-tests,
        build-javascript,
        analyze-code-style,
        analyze-code-quality,
        setup-pull-request
      ]
    name: Run functional tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v2
      - uses: sfdx-actions/setup-sfdx@v1
      - name: Run tests
        run: |
          echo "\$token" > token.txt
          sed -i 's?$token?${{ env.HUB_TOKEN }}?g' token.txt
          echo -n "${{needs.setup-pull-request.outputs.scratch}}" | base64 -d | base64 -d > test-token.txt

          cd tests
          npm install

          node run-functional-tests.js -u ../token.txt -t ../test-token.txt
        env:
          HUB_TOKEN: ${{ secrets.HUB_TOKEN }}
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: reports
          path: tests/cypress/

  build-javascript:
    needs: [cancel-previous-run]
    name: Compile javascript files
    runs-on: ubuntu-latest
    container:
      image: provus1/provus-ci:2.0

    timeout-minutes: 6
    steps:
      - uses: actions/checkout@v2
      - name: Compile javascript files
        run: |
          cp -R . /source
          cd /source

          mkdir node_modules
          cp -R /node_modules/* /source/node_modules
          npm install --silent --legacy-peer-deps
          npm run compile

  analyze-code-style:
    needs: [cancel-previous-run]
    name: Analyze code style
    runs-on: ubuntu-latest
    container:
      image: provus1/provus-ci:2.0

    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - name: Analyze code style
        run: |
          cp -R . /source
          cd /source

          mkdir node_modules
          cp -R /node_modules/* /source/node_modules
          npm run lint

  analyze-code-quality:
    needs: [cancel-previous-run]
    name: Analyze code quality
    runs-on: ubuntu-latest
    container:
      image: provus1/provus-ci:2.0

    timeout-minutes: 6
    steps:
      - uses: actions/checkout@v2
      - name: Analyze code quality
        run: |
          git fetch origin ${GITHUB_BASE_REF##*/}
          /cyborg/pmd-diff-checker.sh origin/${GITHUB_BASE_REF##*/} pmd-ruleset.xml

  lint-commit-message:
    needs: [cancel-previous-run]
    name: Lint commit message
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@v3

  enable-auto-merge:
    name: Enable auto merge
    runs-on: ubuntu-latest
    container:
      image: provus1/provus-ci:2.0
    timeout-minutes: 2
    steps:
      - uses: actions/checkout@v2
      - name: Enable auto merge
        run: |
          cp -R . /source
          cd /source/build
          mkdir node_modules
          cp -R /node_modules/* /source/build/node_modules

          node enableAutoMerge.js -n ${PR_NUMBER}

        env:
          PR_NUMBER: ${{ github.event.number }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  setup-pull-request:
    runs-on: ubuntu-latest
    name: Setup branch
    outputs:
      scratch: ${{ steps.generate-scratch.outputs.scratch-org }}
    steps:
      - uses: sfdx-actions/setup-sfdx@v1
        with:
          sfdx-auth-url: ${{ secrets.AUTH_SECRET }}
      - uses: actions/checkout@v3
      - name: Generate cache key
        run: echo "RANDOM_SUFFIX=${RANDOM}${RANDOM}" >> $GITHUB_ENV
      - name: Disable cache update
        run: echo "UPDATE_CACHE=false" >> $GITHUB_ENV
      - uses: eyal0/cache@main
        with:
          path: 'token'
          key: '${{ github.event.number }}-${{ env.RANDOM_SUFFIX }}'
          restore-keys: |
            ${{ github.event.number }}-
          update-env-variable: 'UPDATE_CACHE'
      - name: Setup scratch org
        id: generate-scratch
        run: |
          CREATE_NEW_ORG=false
          if [ ! -f "token" ]; then
            CREATE_NEW_ORG=true
          else                        
            authStatus=$(sfdx force:auth:sfdxurl:store -f token -d -a testing --json | jq '.status')
            if [[ "$authStatus" != "0" ]]; then
              CREATE_NEW_ORG=true
            fi         
          fi

          if [[ "$CREATE_NEW_ORG" = "true" ]]; then
            echo "\$token" > hub-token
            sed -i 's?$token?${{ env.HUB_TOKEN }}?g' hub-token
            sfdx force:auth:sfdxurl:store -f hub-token -d -a dev-hub
            sfdx force:org:create -f config/project-scratch-def.json -a test-org -v dev-hub adminEmail=me@provusinc.com -c
            sfdx force:org:display -u test-org --verbose --json | jq '.result.sfdxAuthUrl' | sed -e 's/^"//' -e 's/"$//' > token            
          fi

          scratch=$(echo -n $(cat token) | base64 | base64)
          scratch=$(echo -n $(cat token) | base64 | base64)
          scratch="${scratch//'%'/'%25'}"
          scratch="${scratch//$'\n'/'%0A'}"
          scratch="${scratch//$'\r'/'%0D'}"

          echo "::set-output name=scratch-org::$scratch"
          echo "UPDATE_CACHE=true" >> $GITHUB_ENV
        env:
          HUB_TOKEN: ${{ secrets.HUB_TOKEN }}
